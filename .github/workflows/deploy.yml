# .github/workflows/deploy.yml

name: Deploy to Production Server

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Action unique qui se connecte au serveur et exécute toutes les commandes dans le bon ordre.
    - name: Connect to server, Pull, and Deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        # Vos secrets pour la connexion SSH
        host: ${{ secrets.SSH_SERVER }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 65002

        # Vos secrets sont passés en toute sécurité comme variables d'environnement à la session SSH.
        env:
          APP_SECRET: ${{ secrets.APP_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_DRIVER: ${{ secrets.DATABASE_DRIVER }}
          DATABASE_SERVER_VERSION: ${{ secrets.DATABASE_SERVER_VERSION }}
          EMAIL_ADMIN: ${{ secrets.EMAIL_ADMIN }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_OWNER: ${{ secrets.EMAIL_OWNER }}
          MAILER_DSN: ${{ secrets.MAILER_DSN }}

        # Script exécuté sur votre serveur Hostinger
        script: |
          # Se positionne dans le répertoire du projet
          cd domains/sandybrown-duck-473650.hostingersite.com/public_html/server-sushi-symfony
          
          # ÉTAPE 1 : On met à jour le code AVANT toute autre chose.
          # Il n'y aura plus de conflit car le .env n'est pas encore là.
          echo ">>> 1. Pulling latest code from GitHub..."
          git pull origin main
          
          # ÉTAPE 2 : On crée le fichier .env APRÈS le pull.
          # Le '>' écrase le fichier .env existant avec le nouveau contenu.
          echo ">>> 2. Creating .env file from secrets..."
          {
            echo "APP_ENV=prod"
            echo "APP_SECRET='${APP_SECRET}'"
            echo "DATABASE_URL='${DATABASE_URL}'"
            echo "DATABASE_DRIVER='${DATABASE_DRIVER}'"
            echo "DATABASE_SERVER_VERSION='${DATABASE_SERVER_VERSION}'"
            echo "EMAIL_ADMIN='${EMAIL_ADMIN}'"
            echo "EMAIL_FROM='${EMAIL_FROM}'"
            echo "EMAIL_OWNER='${EMAIL_OWNER}'"
            echo "MAILER_DSN='${MAILER_DSN}'"
            echo "CORS_ALLOW_ORIGIN='^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'"
          } > .env
          
          # ÉTAPE 3 : On installe les dépendances PHP
          echo ">>> 3. Installing Composer dependencies..."
          ../composer.phar install --no-dev --optimize-autoloader
          
          # ÉTAPE 4 : On vide le cache Symfony
          echo ">>> 4. Clearing Symfony cache..."
          php bin/console cache:clear --env=prod
          
          # ÉTAPE 5 : On applique les migrations de la base de données
          echo ">>> 5. Running database migrations..."
          php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
          
          # ÉTAPE 6 : On compile les assets (si besoin)
          echo ">>> 6. Compiling assets..."
          php bin/console asset-map:compile --env=prod

          echo "✅ Deployment finished successfully!"
