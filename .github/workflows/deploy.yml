# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: Deploy to Production Server

# Déclenche le workflow à chaque push sur la branche "main"
on:
  push:
    branches: [ main ]

# Définit les permissions pour le job
permissions:
  contents: read

# Un job unique appelé "deploy" qui s'exécutera sur un serveur Ubuntu virtuel
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Cette action est plus simple et mieux adaptée pour ce que nous faisons.
    # Elle se connecte, passe les secrets, et exécute un script en une seule fois.
    - name: Connect to server and deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        # Vos secrets pour la connexion SSH
        host: ${{ secrets.SSH_SERVER }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 65002

        # Vos secrets sont passés en toute sécurité comme variables d'environnement
        # à la session SSH. Ils ne sont accessibles que par le script ci-dessous.
        env:
          APP_SECRET: ${{ secrets.APP_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_DRIVER: ${{ secrets.DATABASE_DRIVER }}
          DATABASE_SERVER_VERSION: ${{ secrets.DATABASE_SERVER_VERSION }}
          EMAIL_ADMIN: ${{ secrets.EMAIL_ADMIN }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_OWNER: ${{ secrets.EMAIL_OWNER }}
          MAILER_DSN: ${{ secrets.MAILER_DSN }}

        # Script exécuté sur votre serveur Hostinger
        script: |
          # Se positionne dans le répertoire du projet
          cd domains/sandybrown-duck-473650.hostingersite.com/public_html/server-sushi-symfony
          
          # ÉTAPE 1 : On met à jour le code AVANT toute autre chose.
          # Comme aucun fichier n'a encore été modifié, il n'y aura pas de conflit.
          echo ">>> 1. Pulling latest code from GitHub..."
          git pull origin main
          
          # ÉTAPE 2 : On crée le fichier .env APRÈS le pull.
          # Le '>' écrase le fichier .env existant avec le nouveau contenu,
          # ce qui est exactement ce que nous voulons pour une mise à jour.
          echo ">>> 2. Creating .env file from secrets..."
          {
            echo "APP_ENV=prod"
            echo "APP_SECRET='${APP_SECRET}'"
            echo "DATABASE_URL='${DATABASE_URL}'"
            echo "DATABASE_DRIVER='${DATABASE_DRIVER}'"
            echo "DATABASE_SERVER_VERSION='${DATABASE_SERVER_VERSION}'"
            echo "EMAIL_ADMIN='${EMAIL_ADMIN}'"
            echo "EMAIL_FROM='${EMAIL_FROM}'"
            echo "EMAIL_OWNER='${EMAIL_OWNER}'"
            echo "MAILER_DSN='${MAILER_DSN}'"
            echo "CORS_ALLOW_ORIGIN='^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'"
          } > .env
          
          # ÉTAPE 3 : On installe les dépendances PHP
          echo ">>> 3. Installing Composer dependencies..."
          ../composer.phar install --no-dev --optimize-autoloader
          
          # ÉTAPE 4 : On vide le cache Symfony
          echo ">>> 4. Clearing Symfony cache..."
          php bin/console cache:clear --env=prod
          
          # ÉTAPE 5 : On applique les migrations de la base de données
          echo ">>> 5. Running database migrations..."
          php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
          
          # ÉTAPE 6 : On compile les assets (si besoin)
          echo ">>> 6. Compiling assets..."
          php bin/console asset-map:compile --env=prod

          echo "✅ Deployment finished successfully!"
