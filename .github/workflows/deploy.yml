# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: Deploy to Production Server

# Déclenche le workflow à chaque push sur la branche "main"
on:
  push:
    branches: [ main ]

# Définit les permissions pour le job, nécessaire pour certaines actions
permissions:
  contents: read

# Un job unique appelé "deploy" qui s'exécutera sur un serveur Ubuntu virtuel
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Récupère le code de votre dépôt
    # Cette étape est nécessaire pour accéder aux fichiers de votre projet.
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Crée le fichier .env à partir des secrets GitHub
    # Ce fichier sera envoyé sur le serveur et ne sera jamais stocké dans votre dépôt.
    - name: Create .env file
      run: |
        echo "APP_ENV=prod" >> .env
        echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> .env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
        echo "MAILER_DSN=${{ secrets.MAILER_DSN }}" >> .env
        # Ajoutez ici d'autres variables d'environnement si nécessaire
        # echo "VOTRE_VARIABLE=${{ secrets.VOTRE_SECRET }}" >> .env
        echo "CORS_ALLOW_ORIGIN=^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$" >> .env

    # 3. Configure la clé SSH pour se connecter au serveur
    # Utilise une action pour charger votre clé privée de manière sécurisée.
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # 4. Copie le fichier .env sur le serveur de production via SCP
    # Le port et les chemins sont spécifiques à votre configuration Hostinger.
    - name: Copy .env file to server via scp
      run: |
        scp -P 65002 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null .env ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }}:domains/sandybrown-duck-473650.hostingersite.com/public_html/server-sushi-symfony/.env

    # 5. Exécute les commandes de déploiement sur le serveur via SSH
    # C'est ici que la magie opère : mise à jour du code, installation, etc.
    - name: Run deployment commands on server
      env:
        SSH_SERVER: ${{ secrets.SSH_SERVER }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        ssh -p 65002 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SSH_USER@$SSH_SERVER "
        # Se positionne dans le répertoire du projet
        cd domains/sandybrown-duck-473650.hostingersite.com/public_html/server-sushi-symfony &&
        
        # --- ÉTAPE CORRIGÉE ET ESSENTIELLE ---
        # Met à jour le code source depuis le dépôt Git
        git pull origin main &&
        
        # Installe les dépendances Composer pour la production
        ../composer.phar install --no-dev --optimize-autoloader &&
        
        # Vide le cache de Symfony pour l'environnement de production
        php bin/console cache:clear --env=prod &&
        
        # Exécute les migrations de la base de données sans poser de question
        php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration &&
        
        # Compile les assets pour la production (si vous utilisez AssetMapper)
        php bin/console asset-map:compile --env=prod
        "

    # 6. Supprime le fichier .env de votre depot
    - name: Remove .env file
      run: |
        rm .env