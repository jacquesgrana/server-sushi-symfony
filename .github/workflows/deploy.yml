# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: Deploy to Hostinger Production Server

# Déclenche le workflow à chaque push sur la branche "main"
# TODO : faire branche prod et es pull requests
on:
  push:
    branches: [ main ]

# Définit les permissions pour le job
permissions:
  contents: read

# Un job unique appelé "deploy" qui s'exécutera sur un serveur Ubuntu virtuel
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Action unique qui se connecte au serveur et exécute toutes les commandes
    - name: Connect to server, Pull, and Deploy
      uses: appleboy/ssh-action@v1.0.3
        
      with:
        # Les paramètres spécifiques à l'action ssh-action
        host: ${{ secrets.SSH_SERVER }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 65002

        # Script exécuté sur votre serveur Hostinger
        script: |
          # Se positionne dans le répertoire du projet
          cd domains/sandybrown-duck-473650.hostingersite.com/public_html/server-sushi-symfony
          
          # ÉTAPE 1 : On supprime l'ancien .env pour éviter les conflits
          echo ">>> 1. Cleaning up old .env file..."
          rm -f .env
          
          # ÉTAPE 1 : On met à jour le code AVANT toute autre chose
          echo ">>> 2. Pulling latest code from GitHub..."
          git pull origin main
          
          # ÉTAPE 2 : On crée le fichier .env APRÈS le pull
          echo ">>> 3. Creating .env file from secrets..."
          {
            echo "APP_ENV=prod"
            echo "APP_SECRET='${{ secrets.APP_SECRET }}'"
            echo "DATABASE_URL='${{ secrets.DATABASE_URL }}'"
            echo "DATABASE_DRIVER='${{ secrets.DATABASE_DRIVER }}'"
            echo "DATABASE_SERVER_VERSION='${{ secrets.DATABASE_SERVER_VERSION }}'"
            echo "EMAIL_ADMIN='${{ secrets.EMAIL_ADMIN }}'"
            echo "EMAIL_FROM='${{ secrets.EMAIL_FROM }}'"
            echo "EMAIL_OWNER='${{ secrets.EMAIL_OWNER }}'"
            echo "MAILER_DSN='${{ secrets.MAILER_DSN }}'"
            echo "CORS_ALLOW_ORIGIN='^https://green-jackal-148000\.hostingersite\.com$'"
          } > .env
          
          # ÉTAPE 3 : On installe les dépendances PHP
          echo ">>> 4. Installing Composer dependencies..."
          ../composer.phar install --no-dev --optimize-autoloader
          
          # ÉTAPE 4 : On vide le cache Symfony
          echo ">>> 5. Clearing Symfony cache..."
          php bin/console cache:clear --env=prod
          
          # ÉTAPE 5 : On applique les migrations de la base de données
          echo ">>> 6. Running database migrations..."
          php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
          
          echo "✅ Deployment finished successfully!"

          # Fin du script